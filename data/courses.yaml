# Entries in this file should have the following fields:
#
# `name`: the title of the course
# `instructor`: the name of the person or people who taught the course
# `institution`: the name of the institution at which the course was taught
# `year`: the most recent year the course was taught
# `lean_version`: 3 or 4, the Lean version of the most recent iteration of the course
# `summary`: a description of what was covered and done in the course
# `tags`: a list of tags (see below)
# `website` (optional): the course's home page
# `material` (optional): a link to a textbook, course notes, etc
# `repo` (optional): a link to the course's project repository, e.g. on GitHub
# `experiences` (optional): a reflection about how the course went, things that could be done differently, etc
# `language` (optional): if the instruction language was not English, what language was it?
#
# Please use tags that are shown on the website. In particular, each entry should have
# a general subject (`mathematics`, `logic`, `computer science`).
#
# This list is not ordered. Add new entries wherever you want.

- name: Introduction to Mathematical Formalization
  instructor: Vasily Ilin
  institution: University of Washington
  year: 2024
  lean_version: 4
  summary: Project-based course aimed at undergrads and early grad students. The focus of the class was purely on the practical aspect of using Lean to state and prove mathematical statements. The intended outcome was not a deep understanding of how Lean works but having the practical skills of breaking down the problem, debugging it, asking for help on Zulip in a productive way, etc. The students spend the first 3 weeks doing exercises in MiL, and the other 7 weeks doing a project. 
  tags: ['English', 'mathematics', 'beginner']
  experiences: Students felt that the pace is too fast. No one completed more than 4-5 chapters of MiL. Projects mostly went well. Each team had two people -- a team leader, who proposed the project (grad student or student with previous Lean experience). This worked well in that the team leader moved the project forward but, on the other hand, the other team member struggled to keep up.  
- name: Computergestütztes mathematisches Beweisen
  instructor: Ralf Gerkmann
  institution: Ludwig-Maximilians-Universität München
  lean_version: 4
  tags: ['German', 'mathematics']
  summary: >
    This is taught as a second-year mathematics undergraduate course.
    It introduces Lean 4 as well as Mathlib and demonstrates how to construct and do proofs
    on both basic mathematical objects, such as real numbers, as well as more advanced ones
    like p-adic numbers.
  website: https://www.mathematik.uni-muenchen.de/~gerkmann/ank_lean.pdf
  year: 2024
- name: Interactive Theorem Proving
  instructor: Jasmin Blanchette
  institution: Ludwig-Maximilians-Universität München
  lean_version: 4
  tags: ['computer science']
  summary: >
    This course introduces the proof assistant Lean 4, its type-theoretic foundations,
    and its applications to computer science and mathematics. It is taught using the Lean 4
    version of The Hitchhiker’s Guide to Logical Verification.
  website: https://www.tcs.ifi.lmu.de/lehre/ss-2024/itp_de.html
  year: 2024
- name: Introduction to formal verification of mathematics
  instructor: Philip Matchett Wood
  institution: Harvard University
  lean_version: 3
  tags: ['mathematics']
  summary: >
    This course was aimed at undergraduates who had taken at least 2 previous
    proof-based courses in mathematics.  We worked through the current version
    (at the time) of the book Mathematics in Lean by Jeremy Avigad and Patrick
    Massot.  The course was closely modeled on a course taught by Jeremy Avigad
    at CMU in 2022.  Student did weekly homework implementing or completing the
    implementation for small example results, and they also produced a midterm
    and a final project where they implemented any mathematics result they
    chose.  Some example final projects were implementing the definitions and
    results of elementary group theory through Legrange’s Theorem and a proof
    of the Euler product formula for the Riemann zeta function.
- name: Topics in formal mathematics
  instructor: Patrick Massot
  institution: Carnegie Mellon University
  lean_version: 4
  tags: ['mathematics']
  repo: https://github.com/leanprover-community/mathematics_in_lean
  material: https://leanprover-community.github.io/mathematics_in_lean/mathematics_in_lean.pdf
  summary: >
    This is taught as a third-year undergraduate course.
    We spent a little more than half the semester working through most of
    Mathematics in Lean with weekly homework assignments.
    Students have to do a small independent project at the halfway point, and a larger one at the end.
  year: 2023
- name: Démontrer avec un ordinateur
  instructor: Riccardo Brasca and Antoine Chambert-Loir
  institution: Université Paris Cité, France
  website: https://moodle.u-paris.fr/course/view.php?id=41914
  lean_version: 4
  tags: ['French', 'intro to proof', 'mathematics']
  summary: >
    The goal of the course is to teach the basics of Lean to first year undergraduate students in a double major program in mathematics and computer science.
  year: 2023
- name: Some high-school mathematics in Lean
  instructor: Peter Pfaffelhuber
  institution: University of Freiburg, Germany
  website: https://github.com/pfaffelh/schulmathematik_mit_lean/
  material: https://github.com/pfaffelh/schulmathematik_mit_lean/blob/master/Manuskript/skript.pdf
  lean_version: 3
  tags: ['German', 'intro to proof', 'mathematics']
  summary: >
    The aim of the course is to learn some Lean 3 using easy mathemtics (such as divisibility, \sqrt 2 \notin \Q, and the
    pigeonwhole principle). The course is in German and was taught in summer 2023 for one full semester with weekly homeworks. We met once a week, discussed upcoming topics and
    started to work on the next exercises in class. The manuscript contains an extended cheat sheet for Lean tactics.
  experiences: >
    The course was intended for students in mathematics who want to become teachers, but was also taken by other math
    students. Only using Prop-types in the first few lessons was a good idea, in my opinion. The students liked the interactive feeling even of the simple proofs. Weekly
    homeworks were made quite consistently, the dropout-rate (among ~15 students) was low.
  year: 2023
- name: Formalising Mathematics 2023
  instructor: Kevin Buzzard
  institution: Imperial College London
  website: https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2023/index.html
  repo: https://github.com/ImperialCollegeLondon/formalising-mathematics-2023
  lean_version: 3
  tags: ['mathematics', 'advanced']
  summary: >
    The course is project-based; the students must write three projects on undergraduate mathematics.
    The lectures are me live Lean coding, solving the sorrys in the repo.
    I'm teaching the course again in 2024 and then it will be in Lean 4.
  year: 2023
- name: Interactive Theorem Proving
  instructor: Jeremy Avigad
  institution: Carnegie Mellon University
  repo: https://github.com/leanprover-community/mathematics_in_lean
  material: https://leanprover-community.github.io/mathematics_in_lean/mathematics_in_lean.pdf
  lean_version: 3
  tags: ['mathematics']
  summary: >
    This was taught as a third-year undergraduate course.
    We spent a little more than half the semester working through the first 6 chapters of
    Mathematics in Lean with weekly homework assignments.
    Students did a small independent project at the halfway point, and a larger one at the end.
  year: 2022
- name: Logic and Mechanized Reasoning
  instructor: Jeremy Avigad
  institution: Carnegie Mellon University
  website: https://www.cs.cmu.edu/~mheule/15217-f21/
  repo: https://github.com/avigad/lamr
  material: https://avigad.github.io/lamr/logic_and_mechanized_reasoning.pdf
  lean_version: 4
  tags: ['logic', 'automated reasoning', 'advanced']
  summary: >
    This course introduces students to the theory of propositional and first-order logic, shows them how to implement fundamental logical algorithms in Lean 4, and shows them how to use automated reasoning tools.
  year: 2021
- name: Logic and Proof
  instructor: Jeremy Avigad
  institution: Carnegie Mellon University
  material: https://leanprover.github.io/logic_and_proof/
  lean_version: 3
  tags: ['logic', 'intro to proof']
  summary: This is an introduction to logic and mathematical reasoning for a general audience. It was taught in the philosophy department at CMU twice.
  year: 2017
- name: Proofs and Programs
  instructor: Siddhartha Gadgil
  institution: Indian Institute of Science, Bangalore
  website: http://math.iisc.ac.in/~gadgil/proofs-and-programs-2023/
  repo: https://github.com/siddhartha-gadgil/proofs-and-programs-2023
  material: http://math.iisc.ac.in/~gadgil/proofs-and-programs-2023/doc/PnP2023.html
  summary: >
    This was an introduction to proving, programming and proving programs in Lean, and also the Dependent Type Theory foundations of Lean.
    The evaluation was based mainly on projects but also on labs.
  experiences: >
    My plan was to live code, then clean-up and add documentation and generate notes with DocGen4.
    This worked very well for a month, with a lot of questions and my adapting explanations.
    Once the projects started the decoupling of lectures and evaluation led to a sharp drop in attendance.
    I course corrected and made lectures into project demo/help/live-coding.
    Advanced students explaining what they had done and less advanced explained what they had,
    where they were stuck, what they needed etc and I (and their fellow students) helped them get unstuck.
    This is working well. Next time I teach I will transition earlier and in a more planned way to this mode.
  year: 2023
  tags: ['intro to proof', 'computer science']
  lean_version: 4
- name: Modern Mathematics with Lean
  instructor: Gihan Marasingha
  institution: University of Exeter
  website: https://gihanmarasingha.github.io/modern-maths-pages/
  lean_version: 3
  tags: ['intro to proof', 'logic', 'mathematics']
  summary: >
    This is a game-based introduction to undergraduate pure mathematics, starting with equations, natural numbers, logic,
    sets, function, real numbers and sequences with draft sections on groups. A book is being written to accompany the
    game. The next iteration of the game will be in Lean 4.
  year: 2022
- name: Theorem Prover Lab -- Applications in Programming Languages
  instructor: Jakob von Raumer
  institution: Karlsruhe Institute of Technology
  repo: https://github.com/IPDSnelting/tba-2022
  website: https://pp.ipd.kit.edu/lehre/SS2022/tba/?lang=de
  notes: The website is partially German, includes more slides and the project descriptions.
  summary: >
    Masters course for computer science students with the first half of the term consisting of a hands-on introduction to Lean 4 and type theory
    and the second half consisting of the students working on either a semantics/compiler project or a formalisation of a graph theory problem.
  experiences: >
    This was already the second year we used Lean 4 and it was good to do it in person again after teaching exclusively online due to Covid the year before.
    We had different levels of learning speed among the students but in the end everybody go the point where they intuitively could use Lean.
    Some students were really eager to golf every proof.
  lean_version: 4
  tags: ['German', 'computer science', 'advanced']
  year: 2022
- name: Discrete Mathematics
  instructor: Heather Macbeth
  institution: Fordham University
  material: https://hrmacbeth.github.io/math2001
  repo: https://github.com/hrmacbeth/math2001
  tags: ['intro to proof', 'mathematics']
  lean_version: 4
  summary: >
    I have written this as a course which is completely bilingual between English and Lean,
    with every example presented both ways (students also have to solve every homework problem both ways).
    It's the standard syllabus of a US "intro to proofs" course for first/second-year undergraduates,
    covering "proof techniques", good style in proof writing,
    elementary number theory, "sufficiently large", recurrence relations,
    functions, relations, and set operations.
  experiences: >
    The students liked using Lean and were able to learn it at the pace required.
    I invested a lot of energy in writing custom tactics which perform exactly one step of reasoning that I would permit on paper,
    and deliberately never mentioned several more powerful tactics.
    This is very useful if the course is explicitly supposed to teach good style in proof writing.
    It lets you off the hook in grading -- you can just say "that's not enough detail -- Lean wouldn't accept it!"
  year: 2023
- name: Complement to general Analysis/Algebra 1st year undergraduate course
  instructor: Frédéric Tran Minh
  institution: Esisar, Grenoble Institute of Technology
  notes: 1st year students, 6 x 1,5h
  repo: https://github.com/ftranminh/Esisar_MA121_HA_lean_2023
  summary: >
    Short module introducing proof to 1st year undergraduates using Lean3 - in French.
    We used proof-term style in Lean.
  experiences:
    - 1st time we use a proof assistant to teach maths
    - students globally appreciated it (feedback, autonomy, playful)
    - some of them think it helped them with maths
    - most of them found the Lean syntax difficult (they also tended to attribute their shortcomings in maths to a programming difficulties)
    - many of them found the Lean error messages helpless
  tags: ['French', 'mathematics', 'intro to proof']
  lean_version: 3
  year: 2023
- name: Logique et démonstrations assistées par ordinateur
  instructor: Patrick Massot
  institution: Université Paris-Saclay
  website: https://www.imo.universite-paris-saclay.fr/~patrick.massot/enseignement/
  repo: https://github.com/PatrickMassot/MDD154/
  notes:
    - Of course there is also a private repo with solutions, and I can give solutions to interested teachers
    - no single pdf but lecture notes at https://www.imo.universite-paris-saclay.fr/~patrick.massot/mdd154/,
    - tactic cheat sheets at https://www.imo.universite-paris-saclay.fr/~patrick.massot/mdd154/aide-memoire.pdf,
    - full tactic reference at https://www.imo.universite-paris-saclay.fr/~patrick.massot/mdd154/reference.pdf
  tags: ['French', 'intro to proof', 'natural language input']
  lean_version: 3
  summary: >
    Since January 2019, I am using Lean to teach first year undergrad double major maths/CS students how to find and write mathematical proofs.
    I first did it alone and then with Frédéric Bourgeois and Christine Paulin.
    The main mathematical topic of this course is elementary real analysis, especially the theory of convergent sequences and continuous functions.
    Since 2021 I use a controlled natural language for input in order to facilitate transferring Lean proofs to pen and paper proofs.
  experiences: >
    This course really works well, and it will probably continue for a long time.
    The idea to use controlled natural language tactics seems a lot more efficient than the native syntax to ensure students improve at pen and paper proofs.
  year: 2023
- name: Introduction to Proofs with Lean Proof Assistant
  instructor: Sina Hazratpour
  institution: Johns Hopkins University
  website: https://sinhp.github.io/teaching/2022-introduction-to-proofs-with-Lean
  repo: https://github.com/sinhp/ProofLab
  summary: An Introduction To Proofs course at Johns Hopkins in Fall 2022 entirely in Lean (teaching and assessment) culminating in the proof of Yoneda Lemma.
  tags: ['intro to proof', 'mathematics']
  lean_version: 3
  year: 2022
- name: Transition to Advanced Mathematics
  instructor: Matthew Ballard
  institution: University of South Carolina
  website: https://300.f22.matthewrobertballard.com/
  summary: Our intro to proofs course. (Fall 2020) Lean was about 1/3 of the course. (Fall 2022) A second iteration using Lean 4.
  tags: [ 'intro to proof', 'mathematics']
  lean_version: 4
  year: 2022
- name: Formalization and mathematics
  instructor: Matthew Ballard
  institution: University of South Carolina
  website: https://411.s23.matthewrobertballard.com
  summary: Spring 2023. More a hybrid math-CS course that was focused on building ability with Lean and expanding students perspectives on math and programming.
  tags: ['mathematics', 'computer science', 'advanced']
  year: 2023
  lean_version: 4
- name: Formalization of mathematics
  instructor: Matthew Ballard
  institution: University of South Carolina
  website: https://github.com/UofSC-Spring-2023-Math-768-001
  summary: Spring 2023. A graduate course where we spent about 2/3's of the course working through exercises from one of Kevin's classes in Lean 3 and then switched to bounding the edge chromatic number of graphs in Lean 4.
  tags: ['mathematics', 'advanced']
  lean_version: 4
  year: 2023
- name: Lean learning group 2023
  instructor: Patrick Kinnear
  institution: Glasgow-Maxwell School
  website: https://www.maths.ed.ac.uk/~pkinnear/leancourse/
  summary: >
    A 1-semester course aimed at graduate students in algebra and related topics at Edinburgh, Heriot-Watt and Glasgow universities.
    Aimed to approach Lean as mathematicians and future formalisers, establishing proficiency in tactic mode.
    For the first part of the course we learned the basics of first-order logic in Lean using the tutorials project,
    before discussing some basics of types and type classes to talk about formalising algebra. Also made use of lftcm2020 exercise sheets, and MiL.
    Concluded with a hackathon working on some group projects.
  experiences: >
    We tried to avoid touching on too much type theory early on to get people confidently interacting with Lean quickly.
    In retrospect, it would have been good to cover this in more depth (albeit only later in the course, after establishing confidence interacting with Lean)
    to aid in dealing with the inevitable issues that arise when formalising an interesting piece of mathematics.
    Also, we originally aimed for the outcome of the course to be group projects working on mathlib contributions,
    but would now say that re-framing the goal as formalising something new in a format that is useful to you as a learner
    (e.g. as a worksheet/interactive part of a textbook) is a better goal pedagogically
    (and could still lead to, e.g., a mathlib contribution in the process even if that isn't the explicit goal).
  tags: ['mathematics', 'advanced']
  lean_version: 3
  year: 2023
- name: Logic and Modelling
  instructor: Robert Y. Lewis, Jasmin Blanchette, Anne Baanen
  institution: Vrije Universiteit Amsterdam
  website: https://studiegids.vu.nl/en/2022-2023/courses/X_401015
  material: https://leanprover.github.io/logic_and_proof/logic_and_proof.pdf
  tags: ['intro to proof', 'logic', 'computer science']
  lean_version: 3
  summary: >
    This course introduces computer science students to propositional logic, predicate logic and modal logic.
    The course uses two formal proof systems: natural deduction (exam) and Lean (homework assignments).
  year: 2023
- name: Formal Proof and Verification
  instructor: Robert Y. Lewis
  institution: Brown University
  website: https://browncs1951x.github.io/
  material: https://lean-forward.github.io/hitchhikers-guide/2023/
  repo: https://github.com/BrownCS1951x/fpv2023
  tags: ['logic', 'computer science', 'advanced']
  lean_version: 4
  summary: >
    This is an upper level undergraduate/graduate course that teaches the theory and practice of proof assistants using Lean.
    Topics covered include verification of functional programs, PL semantics, mathematical structures, metaprogramming,
    and logical foundations. The course is based on Jasmin Blanchette's course Logical Verification and uses the
    Hitchhiker's Guide to Logical Verification as a reference.
  experiences: >
    I have taught this course three times at Brown and it has proven to be quite popular, attracting a mixed audience
    of people interested in math/logic, PL research, and functional programming. Final projects have included a verified
    executable DPLL SAT solver; the mathlib tactic `linear_combination` and initial work toward `polyrith` explorations
    of axiomatic ZFC, linear algebra, and other mathematical topics; and more.
  year: 2023
- name: Discrete Structures and Probability
  instructor: Robert Y. Lewis
  institution: Brown University
  website: https://cs22.io/
  repo: https://github.com/brown-cs22/CS22-Lean-2023
  lean_version: 4
  tags: ['intro to proof', 'computer science']
  summary: >
    This is a large introductory course that is taken by most computer science students at Brown.
    It teaches logic, combinatorics, number theory, and probability, focusing on concepts that are important in computer science.
    In spring 2023 we introduced a Lean component to the course, to emphasize the concepts of proof and deduction.
    The goal is not to achieve Lean proficiency, but rather to bolster students' understanding of the traditional material.
  experiences: >
    Given the size of the course and the momentum of the large TA staff, a full Lean integration is a multi-year effort.
    Students' ability to translate between formal and informal statements was significantly improved over the year before.
    I leaned heavily on the terminology "context," "hypothesis," and "goal" (inspired by the Lean infoview) and there
    were clear signs that this structure was influencing students' approaches to informal proofs.
  year: 2023
- name: Graduate Introduction to Logic
  instructor: Bjørn Kjos-Hanssen
  institution: University of Hawaii at Manoa
  website: https://math.hawaii.edu/wordpress/bjoern/math-654-fall-2022/
  repo: https://github.com/bjoernkjoshanssen/math654
  tags: ['logic', 'mathematics', 'advanced']
  lean_version: 3
  summary: >
    A graduate course in mathematical logic taken mostly by MA and PhD students in mathematics and offered every other year (Fall 2016+2n, n=0,1,2,3,4).
    Model theory, computability theory, set theory. In particular syntax and semantics of first order logic; incompleteness, completeness, and compactness theorems;
    Loewenheim-Skolem theorems; computable and computably enumerable sets; axioms of set theory; ordinals and cardinals.
    Since 2020 I include Lean exercises and projects, and some discussion of type theory.
    For example, formalization of part of Gödel's theorems is included at https://github.com/bjoernkjoshanssen/math654/blob/main/g%C3%B6del-beta-homework.lean
  experiences: >
    The students are willing and able to learn Lean. Including Lean showcases logic as a vibrant rather than dormant area of study.
    As projects in 2022 students created formalizations of exercise solutions for my book "Automatic complexity",
    some of which are included at https://github.com/bjoernkjoshanssen/diophantine-lemma
- name: Programování a dokazování v Leanu
  instructor: Martin Dvorak
  institution: online
  website: https://mam.mff.cuni.cz/
  repo: https://github.com/madvorak/lean-mam
  lean_version: 4
  tags: ['Czech', 'functional programming', 'intro to proof']
  summary: >
    We are a [korespondenční seminář](https://cs.wikipedia.org/wiki/Koresponden%C4%8Dn%C3%AD_semin%C3%A1%C5%99) (lit. "correspondence seminar" in the sense of
    a seminar arranged by exchanging letters and emails) called [M\&M](https://cs.wikipedia.org/wiki/M%26M_\(%C4%8Dasopis\)), which is something like
    an online course for math-olympiad highschoolers, under the hood of the Faculty of Mathematics and Physics of Charles University in Prague.
    Lean is one of our three topics for the school year 2023/2024. There will be five volumes with Lean assignments, six volumes in total.
    Syllabus: (1) the very basics of functional programming; (2) lists; (3) elementary algebraic manipulations; (4) logic; (5) induction.
  experiences: >
    We have 41 active participants (counting students who solved at least three Lean exercises).
    Grading solutions doesn't take much time. Creating materials does.
  year: 2024
- name: Formal Proof
  instructor: Jim Fowler
  institution: The Ohio State University
  website: https://github.com/math4345
  repo: https://github.com/math4345/lectures
  lean_version: 4
  tags: ['mathematics', 'advanced']
  summary: >
    This course provides an introduction to formal proof in mathematics. It is designed for math
    majors who seek a comprehensive understanding of how to use proof assistants and how to encode
    a mathematical proof in such a way that one can formally verify its correctness.
  experiences: >
    This 3-credit course ran for the first time in August 2023 and used Lean 4.
    Lecture time was spent live-coding together.
    The student population was upper-division math majors at Ohio State.
    Assessment was build around weekly problem sets, a midterm project, and a final project.
  year: 2023
- name: Topología general
  instructor: Miguel Marco
  institution: Universidad de Zaragoza
  website: https://sia.unizar.es/doa/consultaPublica/look[conpub]MostrarPubGuiaDocAs?entradaPublica=true&idiomaPais=es.ES&_anoAcademico=2023&_codAsignatura=27008
  repo: https://github.com/miguelmarco/topologia_general_lean
  lean_version: 3
  tags: ['Spanish', 'mathematics']
  summary: >
    It is a standard course on general topology in the Mathematics degree. It is taught in spanish, so the material in the repo uses spanish too.
    It is not a course about Lean: Lean is only used as a complement, to help students grab the steps of rigourous proofs. The usage of Lean is totally
    optional for the students.
  experiences: >
    The course is still ongoing, so we still don't have evidence of success. We decided to use Lean3 instead of Lean4 because of the easyness to install
    the `trylean` bundle, but will reconsider this decision next year. Students seem to be uninterested and/or scared at the beginning, but as i had shown
    how to use it to prove some example exercises, some have shown more interest. We plan to do an introductory seminar for those that want to learn how to use it.
  year: 2023
- name: Formalized Mathematics in Lean
  instructor: Floris van Doorn
  institution: University of Bonn
  repo: https://github.com/fpvandoorn/LeanCourse23
  tags: ['mathematics', 'advanced']
  year: 2023
  lean_version: 4
  summary: >
    This course is for bachelor and master math students that want to learn formalization and Lean. In the first half of the course I will go through the book Mathematics in Lean, and in the second half each student will choose a formalization project to work on and give a presentation about the formalization.
- name: Collaborative Formalization in Analysis
  instructor: Floris van Doorn
  institution: University of Bonn
  repo: https://github.com/fpvandoorn/BonnAnalysis
  tags: ['mathematics', 'advanced', 'analysis']
  year: 2024
  lean_version: 4
  summary: >
    This is a small seminar for master math students that took the previous Lean course and want to continue. It is a collaborative project where the students formalize some new results in analysis, this the aim to PR this to Mathlib, or make it somewhat Mathlib-ready. The topic is fourier analysis, in particular Plancherel's theorem, the interpolation theorems and their applications.
- name: Taller de Lean 4
  instructor: Enric Cosme Llópez
  institution: Universitat de València
  website: https://www.uv.es/coslloen/Lean4.html
  repo: https://github.com/encosllo/TallerLean4
  lean_version: 4
  tags: ['Catalan', 'mathematics']
  summary: >
    This is an informal workshop designed for both teachers and students. Its purpose is to explore the fundamentals of Lean language,
    with a specific focus on introducing the common structures found in an advanced course on set theory and formal logic.
  experiences: >
    This is our third workshop at the Faculty of Mathematics. Unlike previous sessions using Lean 3, this is the first time we're using Lean 4.
    The first semester focuses on laying down foundations, and the second semester involves formalizing results within a specific specialty.
    Last year, we concentrated on basic topological results, and in the current course, our goal is to formalize fundamental results in category theory.
  year: 2023
- name: Poden els ordinadors entendre les matemàtiques? De la geometria axiomàtica als theorem provers
  instructor: Marc Masdeu, Roberto Rubio
  institution: Universitat Autònoma de Barcelona
  website: https://mat.uab.cat/~masdeu/argo/
  repo: https://github.com/mmasdeu/argo
  tags: ['Catalan', 'English', 'mathematics', 'beginner']
  year: 2023
  lean_version: 3
  summary: >
    This was a week-long (20h) summer course introducing motivated high school students to formal mathematics. Half of the time was spent teaching on a blackboard Hilbert's axioms for plane geometry,
    while the other half was spent on a computer lab playing through several levels of a Lean game whose ultimate goal was to proof the plane separation theorem. This was the first
    experience for the students with both axiomatic mathematics and theorem provers. While the course was taught in Catalan, the game is written in English.
  experiences: >
    The students found the Lean part the most challenging part of the course. The students would happily seat through the traditional-style lecture, but struggled when they had to code in Lean the proofs that they had
    previously discussed. This is in part because of Lean's unforgiveness, but we believe it is also due to the fact that they were unaware of some misunderstandings about the proofs, and Lean made those emerge.
- name: Theorem Proving with Lean
  instructor: Damiano Testa
  institution: University of Warwick
  website: https://adomani.github.io/Syllabus/MA4N1/toc
  repo: https://github.com/adomani/MA4N1_2023
  tags: ['mathematics', 'advanced']
  year: 2023
  lean_version: 4
  summary: >
    This course is for master math students that want to learn formalization and Lean.  The students work in groups of 3-5 on a formalization project of their choice.  The lectures and support classes cover material that is relevant for the chosen projects.
- name: Computergestützte Beweisführung
  instructor: Alexander Bentkamp, Jon Eugster
  institution: Heinrich-Heine-Universität Düsseldorf
  website: https://www.math.uni-duesseldorf.de/~internet/CB-V-W23/
  material: https://www.math.uni-duesseldorf.de/~internet/CB-V-W23/Computergestuetzte-Beweisfuehrung-Skript.pdf
  repo: https://github.com/hhu-adam/cgbf2023
  tags: ['German', 'lean4', 'beginner']
  year: 2023
  lean_version: 4
  summary: >
    This lecture on proof assistants brought together students of computer science, mathematics and computational linguistics. The course is about the calculus of inductive constructions with exercises both in Lean and on paper. In the end, we looked at examples of how proof assistants and type theory can be used in computer science, mathematics and computational linguistics. We used only term mode proofs (with the exception of rw/calc).
  experiences: >
    I was surprised how far one can get with essentially term-mode-only proofs. Term mode makes it easier to devise a reasonable paper exam. Bringing the students from the three different subjects together was a challenge. We lost all pure computational linguists during the course of the semester. The students of mathematics seemed to enjoy the course, even though we had little mathematical content.
