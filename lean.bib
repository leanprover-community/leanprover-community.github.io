@book{Avig14,
  author = "Avigad, Jeremy and de Moura, Leonardo and Kong, Soonho",
  title = {{Theorem Proving in Lean}},
  year = "2014",
  link = "\url{https://leanprover.github.io/tutorial/tutorial.pdf}",
  publisher = "Carnegie Mellon University"
}

@misc{Mour15,
  author = "de Moura, Leonardo and Avigad, Jeremy and Kong, Soonho
            and Roux, Cody",
  title = {{Elaboration in Dependent Type Theory}},
  link = "\url{https://arxiv.org/pdf/1505.04324.pdf}",
  year = "2015",
  abstract =
    "To be usable in practice, interactive theoremprovers need to
    provide convenient and efficient means of writing expressions,
    definitions, and proofs. This involves inferring information that
    is often left implicit in an ordinary mathematical text, and
    resolving ambiguities in mathematical expressions. We refer to the
    rpocess of passing from a quasi-formal and partially-specified
    expression to a completely precise formal one as 
    {\sl elaboration}. We describe an elaboration algorithm for dependent
    type theory that has been implemented in the Lean theorem
    prover. Lean's elaborator supports higher-order unification, type
    class inference, ad hoc overloading, insertion of coercions, the
    use of tactics, and the computational reduction of terms. The
    interactions between these components are subtle and complex, and
    the elaboration algorithm has been carefully designed to balance
    efficiency and usability. We describe the central design goals,
    and the means by which they are achieved."
}


@misc{Mour19,
  author = "de Moura, Leonardo and Kong, Soonho and Avigad, Jeremy
            and van Doorn, Floris and von Raumer, Jakob",
  title = {{The Lean Theorem Prover (system description)}},
  link = "\url{http://florisvandoorn.com/papers/lean_description.pdf}",
  year = "2019",
  abstract =
    "Lean is a new open source theorem prover being developed at
    Microsoft Research and Carnegie Mellon University, with a small
  trusted kernel based on dependent type theory. It aims to bridge the
  gap between interactive and automated theorem proving, by situating
  automated tools and methods in a framework that supports user
  interaction and the construction of fully specified axiomatic
  proofs. Lean is an ongoing and long-term effort, but it already
  provides many useful components, integrated development
  environments, and a rich API which can be used to embed it into
  other systems. It is currently being used to formalize category
  theory, homotopy type theory, and abstract algebra. We describe the
  project goals, system architecture, and main features, and we
  discuss applications and continuing work."
}




